import { analyzeText } from "@/take-home-checker/lib/openai";
import { Octokit } from "octokit";
import { fetchFileContent, fetchGitHistory, fetchReadme, fetchRelevantFiles, fetchRepoFiles } from "./github";
import { extractJsonFromString } from "./utils";

export async function analyzeReadme(owner: string, repo: string, octokit: Octokit) {
  const readmeContent = await fetchReadme(owner, repo, octokit);

  if (!readmeContent) {
    return { message: "README.md no encontrado en el repositorio." };
  }

  const prompt = `
  Analiza el siguiente archivo README para buenas pr√°cticas y proporciona un **resumen conciso** considerando los siguientes aspectos:

  1Ô∏è‚É£ **Stack Tecnol√≥gico**: ¬øEl stack tecnol√≥gico est√° claramente mencionado? ¬øEs moderno y relevante?
  2Ô∏è‚É£ **Instalaci√≥n y Uso**: ¬øExisten instrucciones claras para instalar, ejecutar y probar el proyecto? ¬øSe mencionan las dependencias y sus versiones?
  3Ô∏è‚É£ **Despliegue y Accesibilidad**: ¬øMenciona si el proyecto est√° desplegado o c√≥mo probarlo f√°cilmente? ¬øExisten pasos claros para el despliegue si aplica?
  4Ô∏è‚É£ **Decisiones T√©cnicas**: ¬øExplica las decisiones clave tomadas (como por qu√© se utilizaron ciertas bibliotecas o frameworks)?
  5Ô∏è‚É£ **Pruebas**: ¬øIncluye detalles sobre pruebas (manuales o automatizadas)? ¬øSe menciona alguna herramienta o cobertura para las pruebas?
  6Ô∏è‚É£ **Cumplimiento de Requerimientos**: ¬øDefine claramente los objetivos y funcionalidades esperadas? ¬øSe cumplen los requisitos y existe un plan claro para verificar la soluci√≥n? **Limita la respuesta a 3-5 puntos, evitando detalles excesivos.**

  ** ‚ö†Ô∏è Limita la respuesta a 3-5 puntos, evitando detalles excesivos.**

  Contenido del README:
  ${readmeContent}
`;

  const analysis = await analyzeText(prompt);
  return { analysis, content: readmeContent }
}

export async function analyzeProjectStructure(owner: string, repo: string, octokit: Octokit) {
  const allFilePaths = await fetchRepoFiles(owner, repo, octokit);

  if (allFilePaths.length === 0) {
    return { message: "No se pudo obtener la estructura del proyecto o el repositorio est√° vac√≠o." };
  }

  const prompt = `
    Eval√∫a la siguiente estructura del proyecto y determina si sigue las mejores pr√°cticas para un desaf√≠o t√©cnico y proporciona un **resumen conciso** considerando los siguientes aspectos:

    1Ô∏è‚É£ **Organizaci√≥n de Carpetas y Archivos**: ¬øLos archivos y carpetas est√°n bien estructurados seg√∫n las convenciones comunes del proyecto? ¬øHay archivos redundantes o faltantes? Por ejemplo, ¬øhay una separaci√≥n clara entre el c√≥digo fuente, los assets y los archivos de configuraci√≥n?
    2Ô∏è‚É£ **Calidad del C√≥digo y Legibilidad**: ¬øExisten separaciones claras entre las distintas partes del proyecto (por ejemplo, componentes, utilidades, pruebas)? ¬øSe sigue una convenci√≥n de nombres y estructura de carpetas consistente para los m√≥dulos?

    ** ‚ö†Ô∏è Limita la respuesta evitando detalles excesivos.**

    **Estructura del Proyecto:**
    ${allFilePaths.join("\n")}
  `;

  const analysis = await analyzeText(prompt);
  return { analysis }
}

export async function analyzeGitHistory(owner: string, repo: string, octokit: Octokit) {
  const gitHistory = await fetchGitHistory(owner, repo, octokit);

  if (gitHistory.length === 0) {
    return { message: "No se encontraron commits en el repositorio." };
  }

  const prompt = `
  Analiza el historial de commits de Git para buenas pr√°cticas. Proporciona un **resumen breve** de los siguientes aspectos:

    1Ô∏è‚É£ **Mensajes de Commit**: ¬øSon los mensajes de commit claros, concisos y significativos? ¬øSiguen un formato consistente?
    2Ô∏è‚É£ **Desarrollo Basado en Pruebas y Caracter√≠sticas**: ¬øLos mensajes de commit indican trabajo en caracter√≠sticas o pruebas espec√≠ficas?
    3Ô∏è‚É£ **Commits At√≥micos**: ¬øSon los commits at√≥micos, es decir, cada commit aborda una tarea o caracter√≠stica √∫nica, lo que facilita su comprensi√≥n y revisi√≥n?
    4Ô∏è‚É£ **Refactorizaci√≥n de C√≥digo y Formato**: ¬øReflejan los mensajes de commit cambios de refactorizaci√≥n de c√≥digo o formato que mejoren la legibilidad, organizaci√≥n o mantenibilidad?

    ** ‚ö†Ô∏è Limita la respuesta evitando detalles excesivos.**

    **Historial de Commits de Git:**
    ${gitHistory.map(commit => `- ${commit.date}: ${commit.message} por ${commit.author}`).join("\n")}
  `;

  const analysis = await analyzeText(prompt);
  return { analysis }
}

export async function analyzeCodeQuality(owner: string, repo: string, octokit: Octokit) {
  const relevantFiles = await fetchRelevantFiles(owner, repo, octokit);

  const fileContents = await Promise.all(
    relevantFiles.map(async file => ({
      file,
      content: await fetchFileContent(owner, repo, file, octokit)
    }))
  );

  const prompt = `
    Analiza los siguientes archivos de c√≥digo en busca de **buenas pr√°cticas**.
    
    - ¬øSe siguen los patrones correctos(idioms) para React y TypeScript?
    - ¬øSe identifican code smells o patrones incorrectos?
    - ¬øEl c√≥digo es modular y reutilizable?
    - ¬øSe detectan posibles bugs?

    Archivos:
    ${fileContents.map(f => `**${f.file}**\n\`\`\`\n${f.content.slice(0, 1000)}...\n\`\`\``).join("\n\n")}
  `;

  const analysis = await analyzeText(prompt);
  return { analysis }
}


export async function analyzeRepository(owner: string, repo: string, octokit: Octokit) {
  const [readmeAnalysis, codeQualityAnalysis, gitHistoryAnalysis, structureAnalysis] = await Promise.all([
    analyzeReadme(owner, repo, octokit),
    analyzeCodeQuality(owner, repo, octokit),
    analyzeGitHistory(owner, repo, octokit),
    analyzeProjectStructure(owner, repo, octokit),
  ]);

  const prompt = `
    Basado en los siguientes an√°lisis del repositorio, proporciona una calificaci√≥n final (S, A, B, C, D), un resumen y destaca las banderas rojas, amarillas y verdes si es aplicable. Utiliza los est√°ndares de calificaci√≥n de Silicon Valley para startups.

    An√°lisis de README:
    ${readmeAnalysis.analysis}

    An√°lisis del code quality del proyecto:
    ${codeQualityAnalysis.analysis}
    
    An√°lisis de la estructura del proyecto:
    ${structureAnalysis.analysis}
    
    An√°lisis del historial de Git:
    ${gitHistoryAnalysis.analysis}
    
    Por favor, eval√∫a:
    1Ô∏è‚É£ Calidad general del repositorio, considerando la tecnolog√≠a m√°s reciente, escalabilidad e innovaci√≥n.
    2Ô∏è‚É£ Identifica cualquier problema cr√≠tico (banderas rojas), menor (banderas amarillas) y aspectos positivos (banderas verdes).
    3Ô∏è‚É£ Proporciona una calificaci√≥n final seg√∫n los est√°ndares de Silicon Valley:
       - **S (Excepcional)**: Repositorio sobresaliente, cumple con todos los criterios a un nivel alto, escalable, innovador y sin errores.
       - **A (Fuerte)**: Repositorio de alta calidad con problemas menores o √°reas de mejora.
       - **B (Bueno)**: Cumple con la mayor√≠a de los criterios, pero tiene problemas notables, requiere mejoras para obtener una calificaci√≥n m√°s alta.
       - **C (Justo)**: Aceptable, pero falla en √°reas significativas como escalabilidad o elecciones tecnol√≥gicas.
       - **D (Pobre)**: Problemas importantes con el repositorio, incluidos errores, mala arquitectura o falta de caracter√≠sticas clave.
    4Ô∏è‚É£ Resume el an√°lisis y justifica la calificaci√≥n.

    Criterios de Bandera Verde (aspectos positivos):
    üíØ **Desaf√≠os take-home excepcionales**
    Las entregas excepcionales son aquellas memorables para los entrevistadores. Las van a recordar mucho tiempo despu√©s de que se hayan hecho porque se destacan entre las dem√°s.
    Las entregas que impresionan evidencian excelentes rasgos como experiencia, creatividad, intuici√≥n e ingenio.

    **Checklist General**:
    - **Stack tecnol√≥gico seleccionado**: Elegir el stack m√°s actualizado y cercano al cliente.
    - **Historial de Git**: Separar el boilerplate de las contribuciones originales y hacer commits legibles y bien comentados.
    - **F√°cil de probar**: Si es posible, deployar el proyecto para que el entrevistador lo pruebe sin instalar nada.
    - **Documentaci√≥n**: Incluir instrucciones claras y casos de prueba. Asegurarse de que la documentaci√≥n funcione correctamente.
    - **SIN BUGS**: No deben existir bugs, ya que pueden afectar negativamente la evaluaci√≥n.
    - **Cumplir con los requerimientos**: Cumplir los requisitos t√©cnicos y del producto de manera precisa.
    - **Velocidad de entrega**: Cumplir con los deadlines o entregar el challenge dentro de un tiempo razonable.
    - **Limitar el uso de Generative AI**: Evitar el uso de IA generativa para comentarios o para realizar la entrega.
    - **Testear el c√≥digo**: Incluir pruebas que demuestren la capacidad del candidato para testear el c√≥digo adecuadamente.

    Criterios de Bandera Roja (problemas cr√≠ticos):
    - Stack tecnol√≥gico obsoleto o dependencias faltantes.
    - Documentaci√≥n pobre o inexistente, lo que dificulta la prueba o despliegue del proyecto.
    - Errores importantes que rompen la funcionalidad.
    - Falta de escalabilidad o deuda t√©cnica en la arquitectura.

    Devuelve la respuesta como un objeto JSON con la siguiente estructura:
    {
      "grade": "S | A | B | C | D",
      "summary": "Un breve resumen del an√°lisis del repositorio.",
      "redFlags": [], // si hay lista los problemas criticos en este array
      "yellowFlags": [],// si hay lista los problemas menores en este array
      "greenFlags": [], si hay lista los aspectos excepcionales en este array
    }
  `;

  const finalAnalysis = await analyzeText(prompt);
  const all = {
    content: readmeAnalysis.content,
    analysis : extractJsonFromString(finalAnalysis)
  }

  return all
}
